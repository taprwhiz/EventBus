package de.greenrobot.event.annotationprocessor;

import de.greenrobot.event.Subscribe;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Messager;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.lang.model.element.Element;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.Name;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.tools.Diagnostic;
import javax.tools.JavaFileObject;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.List;
import java.util.Set;

@SupportedAnnotationTypes("de.greenrobot.event.Subscribe")
public class EventBusAnnotationProcessor extends AbstractProcessor {
    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment env) {
        if (annotations.isEmpty()) {
            return false;
        }
        Messager messager = processingEnv.getMessager();
        try {
            String className = "MyGeneratedEventBusSubscriberIndex";
            JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(className);
            try (BufferedWriter writer = new BufferedWriter(sourceFile.openWriter())) {
                writer.write("import de.greenrobot.event.SubscriberIndexEntry;\n");
                writer.write("import de.greenrobot.event.ThreadMode;\n\n");
                writer.write("/** This class is generated by EventBus, do not edit. */\n");
                writer.write("public class " + className + " {\n");
                writer.write("    public static final SubscriberIndexEntry[] INDEX = {\n");

                for (TypeElement annotation : annotations) {
                    Set<? extends Element> elements = env.getElementsAnnotatedWith(annotation);
                    for (Element element : elements) {
                        writeIndexEntry(writer, element, messager);
                    }
                }
                writer.write("    };\n}\n");
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return true;
    }

    private void writeIndexEntry(BufferedWriter writer, Element element, Messager messager) throws IOException {
        Subscribe subscribe = element.getAnnotation(Subscribe.class);
        String subscriberClass = element.getEnclosingElement().asType().toString();
        messager.printMessage(Diagnostic.Kind.NOTE, "Found @Subscribe in " + subscriberClass);
        List<? extends VariableElement> parameters = ((ExecutableElement) element).getParameters();
        if (parameters.size() != 1) {
            throw new RuntimeException("Must have exactly 1 parameter");
        }
        String eventType = parameters.get(0).asType().toString();
        writer.append("        new SubscriberIndexEntry(\n");
        writer.append("            ").append(subscriberClass).append(".class,\n");
        writer.append("            \"").append(element.getSimpleName()).append("\",\n");
        writer.append("            ").append(eventType).append(".class,\n");
        writer.append("            ThreadMode.").append(subscribe.threadMode().name()).append("),\n");
    }
}
